use clap::{arg, Command, Arg, ArgAction};

pub fn cmd() -> Command {
    Command::new("param")
        .about("Various param subcommands")
        .aliases(&["p", "par"])
        .subcommand_required(true)
        .arg_required_else_help(true)
        .subcommand(
            Command::new("get")
            .about("Get a parameter value")
            .aliases(["g", "read"])
            .arg_required_else_help(true)
            .arg(
                Arg::new("node_name")
                .help("Name of the ROS node to get parameter from (e.g. '/talker')")
                .required(true)
                .value_name("NODE_NAME")
            )
            .arg(
                Arg::new("param_name")
                .help("Name of the ROS parameter to get (e.g. 'use_sim_time')")
                .required(true)
                .value_name("PARAM_NAME")
            )
            .arg(
                Arg::new("include_hidden_nodes")
                .long("include-hidden-nodes")
                .short('a')
                .aliases(&["include_hidden_nodes", "all"])
                .visible_aliases(&["all"])
                .help("Consider hidden nodes as well")
                .action(ArgAction::SetTrue)
            )
            .arg(
                Arg::new("use_sim_time")
                .short('s')
                .long("use-sim-time")
                .aliases(&["use_sim_time", "use_simtime", "sim"])
                .help("Enable ROS simulation time")
                .action(ArgAction::SetTrue)
            )
            .arg(
                Arg::new("no_daemon")
                .long("no-daemon")
                .aliases(&["no_daemon"])
                .help("Don't spawn or use a running daemon")
                .action(ArgAction::SetTrue)
            )
            .arg(
                Arg::new("spin_time")
                .long("spin-time")
                .aliases(&["spin_time", "spin"])
                .value_name("SPIN_TIME")
                .num_args(1)
                .help("Spin time for discovery (if daemon not in use)")
                .action(ArgAction::Append)
            )
            .arg(
                Arg::new("hide_type")
                .long("hide-type")
                .aliases(&["hide_type"])
                .help("Hide the type information")
                .action(ArgAction::SetTrue)
            )       
        )
        .subcommand(
            Command::new("list")
            .about("Output a list of available parameters")
            .aliases(["l", "ls"])
            .arg_required_else_help(true)        
            .arg(
                Arg::new("node_name")
                .help("Name of the ROS node to get parameters from (e.g. '/talker')")
                .required(true)
            )

            .arg(
                Arg::new("include_hidden_nodes")
                .long("include-hidden-nodes")
                .short('a')
                .aliases(&["include_hidden_nodes", "all"])
                .visible_aliases(&["all"])
                .help("Consider hidden nodes as well")
                .action(ArgAction::SetTrue)
            )
            .arg(
                Arg::new("use_sim_time")
                .short('s')
                .long("use-sim-time")
                .aliases(&["use_sim_time", "use_simtime", "sim"])
                .help("Enable ROS simulation time")
                .action(ArgAction::SetTrue)
            )
            .arg(
                Arg::new("no_daemon")
                .long("no-daemon")
                .aliases(&["no_daemon"])
                .help("Don't spawn or use a running daemon")
                .action(ArgAction::SetTrue)
            )
            .arg(
                Arg::new("spin_time")
                .long("spin-time")
                .aliases(&["spin_time", "spin"])
                .value_name("SPIN_TIME")
                .num_args(1)
                .help("Spin time for discovery (if daemon not in use)")
                .action(ArgAction::Append)
            )
            .arg(
                Arg::new("param_prefixes")
                .long("param-prefixes")
                .aliases(&["param_prefixes"])
                .value_name("PARAM_PREFIXES")
                .num_args(1)
                .help("Only list parameters with the provided prefixes")
                .action(ArgAction::Append)
            )
            .arg(
                Arg::new("param_type")
                .long("param-type")
                .aliases(&["param_type"])
                .help("Print parameter types with parameter names")
                .action(ArgAction::SetTrue)
            )      

        )
        .subcommand(
            Command::new("set")
            .about("Set a parameter value")
            .aliases(["s", "assign"])
            .arg_required_else_help(true)
            .arg(
                arg!(<NODE_NAME> "Name of the ROS node to set parameter on (e.g. '/talker')")
                .required(true)
            )
            .arg(
                arg!(<PARAM_NAME> "Name of the ROS parameter to set (e.g. 'use_sim_time')")
                .required(true)
            )
            .arg(
                arg!(<VALUE> "Value to set the parameter to (e.g. 'true')")
                .required(true)
            )
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not used)"))
            .arg(arg!(-s --use_sim_time "Enable ROS sim time"))
            .arg(arg!(--no_daemon "Don't spawn or use a running daemon"))
            .arg(arg!(--include_hidden_services "Include hidden services"))
        )
        .subcommand(
            Command::new("export")
            .about("Dump all parameters to a file")
            .aliases(["e", "dump"])
            .arg_required_else_help(true)   
            .arg(
                arg!(<NODE_NAME> "Name of the ROS node to set parameter on (e.g. '/talker')")
                .required(true)
            )
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not used)"))
            .arg(arg!(-s --use_sim_time "Enable ROS sim time"))
            .arg(arg!(--no_daemon "Don't spawn or use a running daemon"))
            .arg(arg!(--include_hidden_services "Include hidden services"))
            .arg(arg!(--output_dir <OUTPUT_DIR> "The absolute path where to save the generated file"))
        )
        .subcommand(
            Command::new("remove")
            .about("Remove a parameter")
            .aliases(["r", "delete", "del", "rm"])
            .arg_required_else_help(true)
            .arg(
                arg!(<NODE_NAME> "Name of the ROS node to remove parameter from (e.g. '/talker')")
                .required(true)
            )
            .arg(
                arg!(<PARAM_NAME> "Name of the ROS parameter to remove (e.g. 'use_sim_time')")
                .required(true)
            )
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not used)"))
            .arg(arg!(-s --use_sim_time "Enable ROS sim time"))
            .arg(arg!(--no_daemon "Don't spawn or use a running daemon"))
            .arg(arg!(--include_hidden_services "Include hidden services"))
        )
        .subcommand(
            Command::new("describe")
            .about("Show information about a parameter")
            .aliases(["d", "info"])
            .arg_required_else_help(true)
            .arg(
                arg!(<NODE_NAME> "Name of the ROS node to describe parameter from (e.g. '/talker')")
                .required(true)
            )
            .arg(
                arg!(<PARAM_NAME> "Name of the ROS parameter to describe (e.g. 'use_sim_time')")
                .required(true)
            )
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not used)"))
            .arg(arg!(-s --use_sim_time "Enable ROS sim time"))
            .arg(arg!(--no_daemon "Don't spawn or use a running daemon"))
            .arg(arg!(--include_hidden_services "Include hidden services"))
        )
        .subcommand(
            Command::new("import")
            .about("Load parameters from a file")
            .aliases(["i", "load"])
            .arg_required_else_help(true)
            .arg(
                arg!(<NODE_NAME> "Name of the ROS node to import parameters to (e.g. '/talker')")
                .required(true)
            )
            .arg(
                arg!(<PARAM_FILE> "Path to the file to load parameters from (e.g. '/home/user/params.yaml')")
                .required(true)
            )
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not used)"))
            .arg(arg!(-s --use_sim_time "Enable ROS sim time"))
            .arg(arg!(--no_daemon "Don't spawn or use a running daemon"))
            .arg(arg!(--include_hidden_services "Include hidden services"))
            .arg(arg!(--no_use_wildcard "Do not load parameters in the '/**' namespace into the node"))
        )
}
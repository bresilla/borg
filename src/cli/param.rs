use clap::{arg, Command};

use crate::cli::utils::aly;

pub fn cmd(subs: bool, _logo: bool) -> Command {
    Command::new("param")
        .about(aly("p", subs) + "Various param subcommands")
        .aliases(&["p", "par"])
        .subcommand_required(true)
        .arg_required_else_help(true)
        .subcommand(
            Command::new("get")
            .about("Get a parameter value")
            .aliases(["g", "read"])
            .arg_required_else_help(true)
            .arg(
                arg!(<NODE_NAME> "Name of the ROS node to get parameter from (e.g. '/talker')")
                .required(true)
            )
            .arg(
                arg!(<PARAM_NAME> "Name of the ROS parameter to get (e.g. 'use_sim_time')")
                .required(true)
            )
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not used)"))
            .arg(arg!(-s --use_sim_time "Enable ROS sim time"))
            .arg(arg!(--no_daemon "Don't spawn or use a running daemon"))
            .arg(arg!(--include_hidden_services "Include hidden services"))      
            .arg(arg!(--hide_type "Hide the type information"))          
        )
        .subcommand(
            Command::new("list")
            .about("Output a list of available parameters")
            .aliases(["l", "ls"])
            .arg_required_else_help(true)
            .arg(
                arg!(<NODE_NAME> "Name of the ROS node to get parameters from (e.g. '/talker')")
                .required(true)
            )
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not used)"))
            .arg(arg!(-s --use_sim_time "Enable ROS sim time"))
            .arg(arg!(--no_daemon "Don't spawn or use a running daemon"))
            .arg(arg!(--include_hidden_services "Include hidden services"))      
            .arg(arg!(--param_prefixes <PARAM_PREFIXES>... "Only list parameters with the provided prefixes"))                                                                                                                                                                                      
            .arg(arg!(--param_type "Print parameter types with parameter names"))                     
        )
        .subcommand(
            Command::new("set")
            .about("Set a parameter value")
            .aliases(["s", "assign"])
            .arg_required_else_help(true)
            .arg(
                arg!(<NODE_NAME> "Name of the ROS node to set parameter on (e.g. '/talker')")
                .required(true)
            )
            .arg(
                arg!(<PARAM_NAME> "Name of the ROS parameter to set (e.g. 'use_sim_time')")
                .required(true)
            )
            .arg(
                arg!(<VALUE> "Value to set the parameter to (e.g. 'true')")
                .required(true)
            )
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not used)"))
            .arg(arg!(-s --use_sim_time "Enable ROS sim time"))
            .arg(arg!(--no_daemon "Don't spawn or use a running daemon"))
            .arg(arg!(--include_hidden_services "Include hidden services"))
        )
        .subcommand(
            Command::new("export")
            .about("Dump all parameters to a file")
            .aliases(["e", "dump"])
            .arg_required_else_help(true)   
            .arg(
                arg!(<NODE_NAME> "Name of the ROS node to set parameter on (e.g. '/talker')")
                .required(true)
            )
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not used)"))
            .arg(arg!(-s --use_sim_time "Enable ROS sim time"))
            .arg(arg!(--no_daemon "Don't spawn or use a running daemon"))
            .arg(arg!(--include_hidden_services "Include hidden services"))
            .arg(arg!(--output_dir <OUTPUT_DIR> "The absolute path where to save the generated file"))
        )
        .subcommand(
            Command::new("remove")
            .about("Remove a parameter")
            .aliases(["r", "delete", "del", "rm"])
            .arg_required_else_help(true)
            .arg(
                arg!(<NODE_NAME> "Name of the ROS node to remove parameter from (e.g. '/talker')")
                .required(true)
            )
            .arg(
                arg!(<PARAM_NAME> "Name of the ROS parameter to remove (e.g. 'use_sim_time')")
                .required(true)
            )
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not used)"))
            .arg(arg!(-s --use_sim_time "Enable ROS sim time"))
            .arg(arg!(--no_daemon "Don't spawn or use a running daemon"))
            .arg(arg!(--include_hidden_services "Include hidden services"))
        )
        .subcommand(
            Command::new("describe")
            .about("Show information about a parameter")
            .aliases(["d", "info"])
            .arg_required_else_help(true)
            .arg(
                arg!(<NODE_NAME> "Name of the ROS node to describe parameter from (e.g. '/talker')")
                .required(true)
            )
            .arg(
                arg!(<PARAM_NAME> "Name of the ROS parameter to describe (e.g. 'use_sim_time')")
                .required(true)
            )
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not used)"))
            .arg(arg!(-s --use_sim_time "Enable ROS sim time"))
            .arg(arg!(--no_daemon "Don't spawn or use a running daemon"))
            .arg(arg!(--include_hidden_services "Include hidden services"))
        )
        .subcommand(
            Command::new("import")
            .about("Load parameters from a file")
            .aliases(["i", "load"])
            .arg_required_else_help(true)
            .arg(
                arg!(<NODE_NAME> "Name of the ROS node to import parameters to (e.g. '/talker')")
                .required(true)
            )
            .arg(
                arg!(<PARAM_FILE> "Path to the file to load parameters from (e.g. '/home/user/params.yaml')")
                .required(true)
            )
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not used)"))
            .arg(arg!(-s --use_sim_time "Enable ROS sim time"))
            .arg(arg!(--no_daemon "Don't spawn or use a running daemon"))
            .arg(arg!(--include_hidden_services "Include hidden services"))
            .arg(arg!(--no_use_wildcard "Do not load parameters in the '/**' namespace into the node"))
        )
}
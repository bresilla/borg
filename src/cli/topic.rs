use clap::{arg, Command};
use crate::cli::utils::aly;

pub fn cmd(subs: bool, _logo: bool) -> Command {
    Command::new("topic")
        .about(aly("t", subs) + "Various topic subcommands")
        .aliases(&["t", "top"])
        .subcommand_required(true)
        .arg_required_else_help(true)
        .subcommand(
            Command::new("echo")
            .about("Print messages from topic to screen")
            .aliases(["e", "cat"])
            .arg_required_else_help(true)
            .arg(
                arg!(<TOPIC_NAME> "Name of the ROS topic to echo (e.g. '/chatter')")
                .required(true)
            )
            .arg(
                arg!(<MESSAGE_TYPE> "Type of the ROS message (e.g. 'std_msgs/msg/String')")
                .required(true)
            )
            .arg(arg!(--spin_time <SPIN_TIME> "Time (sec) to spin. Default: until interrupted"))
            .arg(arg!(-s --use_sim_time "Use simulation time if available"))
            .arg(arg!(--no_daemon "Don't spawn or use running daemon"))
            .arg(arg!(--qos_profile <QOS_PROFILE> "QoS preset profile (default: sensor_data)"))
            .arg(arg!(--qos_depth <QOS_DEPTH> "Queue size setting (overrides QoS profile)"))
            .arg(arg!(--qos_history <QOS_HISTORY> "History of samples setting (default: keep_last)"))
            .arg(arg!(--qos_reliability <QOS_RELIABILITY> "Reliability setting (default: Auto match)"))
            .arg(arg!(--qos_durability <QOS_DURABILITY> "Durability setting (default: Auto match)"))
            .arg(arg!(--csv "Output fields separated by commas (for plotting)"))
            .arg(arg!(--field <FIELD> "Echo selected field of a message"))
            .arg(arg!(-f --full_length "Output all elements for arrays, bytes, and long strings"))
            .arg(arg!(-l --truncate_length <TRUNCATE_LENGTH> "Length to truncate arrays/strings to (default: 128)"))
            .arg(arg!(--no_arr "Don't print array fields"))
            .arg(arg!(--no_str "Don't print string fields"))
            .arg(arg!(--flow_style "Print collections in block style (not in csv)"))
            .arg(arg!(--no_lost_messages "Don't report lost messages"))
            .arg(arg!(--raw "Echo raw binary representation"))
            .arg(arg!(--once "Print first message and exit"))
        )
        .subcommand(
            Command::new("hz")
            .about("Display publishing rate of topic")
            .aliases(["h", "rate"])
            .arg_required_else_help(true)
            .arg(
                arg!(<TOPIC_NAME> "Name of the ROS topic to mnitor (e.g. '/chatter')")
                .required(true)
            )  
            .arg(arg!(-w --window <WINDOW> "Window size for rate calculation (default: 10000)"))
            .arg(arg!(--filter <EXPR> "Filter messages by Python expression"))
            .arg(arg!(--wall_time "Calculate rate using wall time (useful when clock is not published)"))
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time in seconds for discovery (if daemon not in use)"))
            .arg(arg!(-s --use_sim_time "Enable ROS simulation time"))                    
        )
        .subcommand(
            Command::new("info")
            .about("Print information about a topic")
            .aliases(["i", "show"])
            .arg_required_else_help(true)
            .arg(
                arg!(<TOPIC_NAME> "Name of the ROS topic to get info (e.g. '/chatter')")
                .required(true)
            )
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not in use)"))
            .arg(arg!(-s --use_sim_time "Enable ROS simulation time"))
            .arg(arg!(--no_daemon "Don't spawn or use a running daemon"))
            .arg(arg!(-v --verbose "Print detailed information about nodes, namespaces, topic types..."))                    
        )
        .subcommand(
            Command::new("list")
            .about("Output a list of available topics")
            .aliases(["l", "ls"])
            .arg_required_else_help(true)
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not in use)"))
            .arg(arg!(-s --use_sim_time "Enable ROS simulation time"))
            .arg(arg!(--no_daemon "Don't spawn or use a running daemon"))
            .arg(arg!(-t --show_types "Additionally show the topic type"))
            .arg(arg!(-c --count_topics "Only display the number of topics discovered"))
            .arg(arg!(--include_hidden_topics "Consider hidden topics as well"))
        )
        .subcommand(
            Command::new("pub")
            .about("Publish a message to a topic")
            .aliases(["p", "publish"])
            .arg_required_else_help(true)
            .arg(
                arg!(<TOPIC_NAME> "Name of the ROS topic to publish to (e.g. '/chatter')")
                .required(true)
            )
            .arg(
                arg!(<MESSAGE_TYPE> "Type of the ROS message (e.g. 'std_msgs/msg/String')")
                .required(true)
            )
            .arg(
                arg!(<VALUES> "Values to fill the message with in YAML format (e.g. 'data: Hello World')")
                .required(true)
            )
            .arg(arg!(-r --rate <RATE> "Publishing rate in Hz (default: 1)"))
            .arg(arg!(-p --print <PRINT> "Print every N-th message (default: 1)"))
            .arg(arg!(--once "Publish one message and exit"))
            .arg(arg!(-t --times <TIMES> "Publish this many times and exit"))
            .arg(arg!(-w --wait_matching_subscriptions <WAIT_MATCHING_SUBS> "Wait for specified matching subscriptions"))
            .arg(arg!(--keep_alive <KEEP_ALIVE> "Keep node alive N sec after last message (default: 0.1)"))
            .arg(arg!(-n --node_name <NODE_NAME> "Name of publishing node"))
            .arg(arg!(--qos_profile <QOS_PROFILE> "QoS preset profile to publish"))
            .arg(arg!(--qos_depth <QOS_DEPTH> "Queue size setting (overrides profile)"))
            .arg(arg!(--qos_history <QOS_HISTORY> "History of samples setting (overrides profile, default: keep_last)"))
            .arg(arg!(--qos_reliability <QOS_RELIABILITY> "QoS reliability setting (overrides profile, default: reliable)"))
            .arg(arg!(--qos_durability <QOS_DURABILITY> "QoS durability setting (overrides profile, default: transient_local)"))
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not used)"))
            .arg(arg!(-s --use_sim_time "Enable ROS sim time"))
        )
        .subcommand(
            Command::new("kind")
            .about("Print a topic's type/kind")
            .aliases(["k", "type"])
            .arg_required_else_help(true)
            .arg(
                arg!(<TOPIC_NAME> "Name of the ROS topic to get type (e.g. '/chatter')")
                .required(true)
            )
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not in use)"))
            .arg(arg!(-s --use_sim_time "Enable ROS simulation time"))
            .arg(arg!(--no_daemon "Don't spawn or use a running daemon"))
        )
        .subcommand(
            Command::new("bw")
            .about("Display bandwidth used by topic")
            .aliases(["b", "bandwidth"])
            .arg_required_else_help(true)
            .arg(
                arg!(<TOPIC_NAME> "Name of the ROS topic to get bandwidth (e.g. '/chatter')")
                .required(true)
            )
            .arg(arg!(-w --window <WINDOW> "Window size for rate calculation (default: 10000)"))
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not used)"))
            .arg(arg!(-s --use_sim_time "Enable ROS sim time"))
        )
        .subcommand(
            Command::new("find")
            .about("Output a list of available topics of a given type")
            .aliases(["f", "lookup", "search"])
            .arg_required_else_help(true)
            .arg(
                arg!(<TOPIC_TYPE> "Name of the ROS topic type to filter for (e.g. 'std_msg/msg/String')")
                .required(true)
            )
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not in use)"))
            .arg(arg!(-s --use_sim_time "Enable ROS simulation time"))
            .arg(arg!(--no_daemon "Don't spawn or use a running daemon"))
            .arg(arg!(-c --count_topics "Only display the number of topics discovered"))
            .arg(arg!(--include_hidden_topics "Consider hidden topics as well"))
        )
        .subcommand(
            Command::new("delay")
            .about("Display delay of topic from timestamp in header")
            .aliases(["d", "latency"])
            .arg_required_else_help(true)
            .arg(
                arg!(<TOPIC_NAME> "Name of the ROS topic to get delay (e.g. '/chatter')")
                .required(true)
            )
            .arg(arg!(-w --window <WINDOW> "Window size for rate calculation (default: 10000)"))
            .arg(arg!(--spin_time <SPIN_TIME> "Spin time for discovery (if daemon not used)"))
            .arg(arg!(-s --use_sim_time "Enable ROS sim time"))
        )
}